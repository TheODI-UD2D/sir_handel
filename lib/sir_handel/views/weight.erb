<form class="form-inline" action="/signal" method="get">
  <div class="form-group">
    <label for="from">From</label>
    <input type="text" class="form-control" id="from" name="from" value="<%= params[:from] %>">
  </div>
  <div class="form-group">
    <label for="to">To</label>
    <input type="text" class="form-control" id="to" name="to" value="<%= params[:to] %>">
  </div>
  <div class="form-group">
    <label for="interval">Interval</label>
    <input type="text" class="form-control" id="interval" name="interval" value="<%= params[:interval] %>" style="width: 75px">
  </div>
  <div class="form-group">
    <label for="signal">Signal</label>
    <select class="form-control" id="signal" name="signal">
      <% @signals.each do |signal,address| %>
        <option><%= signal %></option>
      <% end %>
    </select>
  </div>
  <div class="form-group">
    <button type="submit" class="btn btn-primary">Submit</button>
  </div>
</form>

<div id='chart'>
  <svg style='height:500px'> </svg>
</div>

<script>

function myGraph(json) {

  var extent = d3.extent(json.results.map(function(r) { return r.value; }))

  var chart = nv.models.lineChart().
                options({
                  margin: {left: 100, bottom: 100},  //Adjust chart margins to give the x-axis some breathing room.
                  useInteractiveGuideline: true,  //We want nice looking tooltips and a guideline!
                  duration: 350,  //how fast do you want the lines to transition?
                  showLegend: false,       //Show the legend, allowing users to turn on/off line series.
                  showYAxis: true,        //Show the y-axis
                  showXAxis: true,        //Show the x-axis
                  yDomain: extent,
                  xScale: d3.time.scale.utc()
                });

  timeFormat = d3.time.format("%Y-%m-%dT%H:%M:%S+00:00");

  chart.xAxis     //Chart x-axis settings
      .axisLabel('Time')
      .tickFormat(function(d) { return timeFormat(new Date(d)) })
      .rotateLabels(75)
      .showMaxMin(false)

  chart.yAxis     //Chart y-axis settings
      .axisLabel('Value')
      .tickFormat(d3.format('.02f'));

  var values = [];
  json.results.forEach(function(r) {
    values.push({
      x: timeFormat.parse(r.timestamp),
      y: r.value
    })
  })

  data = [
    {
      values: values,
      key: 'Value',
      color: '#ff7f0e'
    }
  ]

  d3.select('#chart svg')    //Select the <svg> element you want to render the chart in.
      .datum(data)         //Populate the <svg> element with chart data...
      .call(chart);          //Finally, render the chart!

  nv.utils.windowResize(chart.update);
  nv.addGraph(function() { return chart });
}

d3.json('<%= url('/signal.json') + '?' + URI.encode_www_form(params) %>', myGraph);

</script>
